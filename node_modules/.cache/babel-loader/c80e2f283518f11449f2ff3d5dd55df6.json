{"ast":null,"code":"var _jsxFileName = \"/Users/sulaimanmarey/Desktop/comment-section-react.js/src/comments/Comments.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport CommentForm from './CommentForm';\nimport Comment from './Comment';\nimport { getComments as getCommentsApi, createComment as createCommentApi, updateComment as updateCommentApi, deleteComment as deleteCommentApi } from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Comments = _ref => {\n  _s();\n\n  let {\n    commentsUrl,\n    currentUserId\n  } = _ref;\n  const [backendComments, setBackendComments] = useState([]);\n  const [activeComment, setActiveComment] = useState(null);\n  const rootComments = backendComments.filter(backendComment => backendComment.parentId === null);\n\n  const getReplies = commentId => backendComments.filter(backendComment => backendComment.parentId === commentId).sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n\n  const addComment = (text, parentId) => {\n    createCommentApi(text, parentId).then(comment => {\n      setBackendComments([comment, ...backendComments]);\n      setActiveComment(null);\n    });\n  };\n\n  const updateComment = (text, commentId) => {\n    updateCommentApi(text).then(() => {\n      const updatedBackendComments = backendComments.map(backendComment => {\n        if (backendComment.id === commentId) {\n          return { ...backendComment,\n            body: text\n          };\n        }\n\n        return backendComment;\n      });\n      setBackendComments(updatedBackendComments);\n      setActiveComment(null);\n    });\n  };\n\n  const deleteComment = commentId => {\n    if (window.confirm('Are you sure you want to remove comment?')) {\n      deleteCommentApi().then(() => {\n        const updatedBackendComments = backendComments.filter(backendComment => backendComment.id !== commentId);\n        setBackendComments(updatedBackendComments);\n      });\n    }\n  };\n\n  useEffect(() => {\n    getCommentsApi().then(data => {\n      setBackendComments(data);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"comments-title\",\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-form-title\",\n      children: \"Write comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CommentForm, {\n      submitLabel: \"Write\",\n      handleSubmit: addComment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-container\",\n      children: rootComments.map(rootComment => /*#__PURE__*/_jsxDEV(Comment, {\n        comment: rootComment,\n        replies: getReplies(rootComment.id),\n        activeComment: activeComment,\n        setActiveComment: setActiveComment,\n        addComment: addComment,\n        deleteComment: deleteComment,\n        updateComment: updateComment,\n        currentUserId: currentUserId\n      }, rootComment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Comments, \"Nh9uypyQCza2uraZ+lh8htJiD1M=\");\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["/Users/sulaimanmarey/Desktop/comment-section-react.js/src/comments/Comments.js"],"names":["useState","useEffect","CommentForm","Comment","getComments","getCommentsApi","createComment","createCommentApi","updateComment","updateCommentApi","deleteComment","deleteCommentApi","Comments","commentsUrl","currentUserId","backendComments","setBackendComments","activeComment","setActiveComment","rootComments","filter","backendComment","parentId","getReplies","commentId","sort","a","b","Date","createdAt","getTime","addComment","text","then","comment","updatedBackendComments","map","id","body","window","confirm","data","rootComment"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport CommentForm from './CommentForm';\nimport Comment from './Comment';\nimport {\n  getComments as getCommentsApi,\n  createComment as createCommentApi,\n  updateComment as updateCommentApi,\n  deleteComment as deleteCommentApi,\n} from '../api';\n\nconst Comments = ({ commentsUrl, currentUserId }) => {\n  const [backendComments, setBackendComments] = useState([]);\n  const [activeComment, setActiveComment] = useState(null);\n  const rootComments = backendComments.filter(\n    (backendComment) => backendComment.parentId === null\n  );\n  const getReplies = (commentId) =>\n    backendComments\n      .filter((backendComment) => backendComment.parentId === commentId)\n      .sort(\n        (a, b) =>\n          new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n      );\n  const addComment = (text, parentId) => {\n    createCommentApi(text, parentId).then((comment) => {\n      setBackendComments([comment, ...backendComments]);\n      setActiveComment(null);\n    });\n  };\n\n  const updateComment = (text, commentId) => {\n    updateCommentApi(text).then(() => {\n      const updatedBackendComments = backendComments.map((backendComment) => {\n        if (backendComment.id === commentId) {\n          return { ...backendComment, body: text };\n        }\n        return backendComment;\n      });\n      setBackendComments(updatedBackendComments);\n      setActiveComment(null);\n    });\n  };\n  const deleteComment = (commentId) => {\n    if (window.confirm('Are you sure you want to remove comment?')) {\n      deleteCommentApi().then(() => {\n        const updatedBackendComments = backendComments.filter(\n          (backendComment) => backendComment.id !== commentId\n        );\n        setBackendComments(updatedBackendComments);\n      });\n    }\n  };\n\n  useEffect(() => {\n    getCommentsApi().then((data) => {\n      setBackendComments(data);\n    });\n  }, []);\n\n  return (\n    <div className=\"comments\">\n      <h3 className=\"comments-title\">Comments</h3>\n      <div className=\"comment-form-title\">Write comment</div>\n      <CommentForm submitLabel=\"Write\" handleSubmit={addComment} />\n      <div className=\"comments-container\">\n        {rootComments.map((rootComment) => (\n          <Comment\n            key={rootComment.id}\n            comment={rootComment}\n            replies={getReplies(rootComment.id)}\n            activeComment={activeComment}\n            setActiveComment={setActiveComment}\n            addComment={addComment}\n            deleteComment={deleteComment}\n            updateComment={updateComment}\n            currentUserId={currentUserId}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Comments;\n"]},"metadata":{},"sourceType":"module"}